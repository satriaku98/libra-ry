basePath: /
definitions:
  domain.AnggotaSwagger:
    properties:
      alamat:
        type: string
      email:
        type: string
      id:
        type: integer
      nama:
        type: string
      no_hp:
        type: string
      user_id:
        type: integer
    type: object
  domain.BukuSwagger:
    properties:
      id_buku:
        type: integer
      judul:
        type: string
      penerbit:
        type: string
      penulis:
        type: string
      stok:
        type: integer
      tags:
        items:
          type: string
        type: array
      tahun_terbit:
        type: integer
    type: object
  domain.UserResponse:
    properties:
      id:
        type: integer
      permissions:
        items:
          type: string
        type: array
      role:
        type: string
      username:
        type: string
    type: object
  domain.UserSwagger:
    properties:
      id:
        type: integer
      password:
        type: string
      permissions:
        items:
          type: string
        type: array
      role:
        type: string
      username:
        type: string
    type: object
  handler.ChangePasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  handler.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: API untuk mengelola data buku
  title: Buku API
  version: "1.0"
paths:
  /anggota:
    delete:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete member profile
      tags:
      - anggota
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.AnggotaSwagger'
      security:
      - BearerAuth: []
      summary: Get member detail
      tags:
      - anggota
    post:
      consumes:
      - application/json
      parameters:
      - description: Anggota data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.AnggotaSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.AnggotaSwagger'
      security:
      - BearerAuth: []
      summary: Create member profile
      tags:
      - anggota
    put:
      consumes:
      - application/json
      parameters:
      - description: Anggota data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.AnggotaSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.AnggotaSwagger'
      security:
      - BearerAuth: []
      summary: Update member profile
      tags:
      - anggota
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Username and Password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: JWT Token
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login and get JWT token
      tags:
      - auth
  /buku:
    get:
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: Search by book title
        in: query
        name: judul
        type: string
      - description: Search by author
        in: query
        name: penulis
        type: string
      - description: Search by publisher
        in: query
        name: penerbit
        type: string
      - description: Search by year published
        in: query
        name: tahun_terbit
        type: integer
      - description: Comma-separated list of tags (e.g., drama,adventure)
        in: query
        name: tags
        type: string
      - description: Comma-separated sort fields (e.g., tahun_terbit,-stok)
        in: query
        name: sortBy
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.BukuSwagger'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get paginated books
      tags:
      - books
    post:
      consumes:
      - application/json
      parameters:
      - description: Book Data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/domain.BukuSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Book created
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new book
      tags:
      - books
  /buku/{id}:
    delete:
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Book deleted
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a book
      tags:
      - books
    get:
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.BukuSwagger'
      security:
      - BearerAuth: []
      summary: Get a book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Book Data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/domain.BukuSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: Book updated
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update book details
      tags:
      - books
  /user:
    get:
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Filter by username
        in: query
        name: username
        type: string
      - description: Filter by role
        in: query
        name: role
        type: string
      - description: Filter by permission
        in: query
        name: permissions
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.UserSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create new user
      tags:
      - users
  /user/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete user by ID
      tags:
      - users
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.UserResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.UserResponse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user by ID
      tags:
      - users
  /user/change-password:
    put:
      consumes:
      - application/json
      parameters:
      - description: Change Password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
