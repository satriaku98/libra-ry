definitions:
  authorization.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  domain.Buku:
    properties:
      id_buku:
        type: integer
      judul:
        type: string
      penerbit:
        type: string
      penulis:
        type: string
      stok:
        type: integer
      tahun_terbit:
        type: integer
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Username and Password
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/authorization.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: JWT Token
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login and get JWT token
      tags:
      - auth
  /buku:
    get:
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: Search by book title
        in: query
        name: judul
        type: string
      - description: Search by author
        in: query
        name: penulis
        type: string
      - description: Search by publisher
        in: query
        name: penerbit
        type: string
      - description: Search by year published
        in: query
        name: tahun_terbit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Buku'
            type: array
      security:
      - BearerAuth: []
      summary: Get paginated books
      tags:
      - books
    post:
      consumes:
      - application/json
      parameters:
      - description: Book Data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/domain.Buku'
      produces:
      - application/json
      responses:
        "201":
          description: Book created
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new book
      tags:
      - books
  /buku/{id}:
    delete:
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Book deleted
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a book
      tags:
      - books
    get:
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Buku'
      security:
      - BearerAuth: []
      summary: Get a book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Book Data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/domain.Buku'
      produces:
      - application/json
      responses:
        "200":
          description: Book updated
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update book details
      tags:
      - books
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
